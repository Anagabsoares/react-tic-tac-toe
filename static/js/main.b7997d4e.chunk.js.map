{"version":3,"sources":["components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","onClickCallback","value","id","className","onClick","Board","squareList","squares","concat","map","square","generateSquareComponents","role","PLAYER_1","generateSquares","row","col","currentId","push","App","useState","setSquares","currentPlayer","setSquareValue","winner","setWinner","count","setCount","checkForWinner","i","newSquares","found","currentSquare","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b7997d4e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Square.css';\n\nconst Square = ({ onClickCallback, value, id }) => {\n  return <button\n    className=\"square\"\n    onClick={() => onClickCallback(id)}>{value}</button>;\n};\n\nSquare.propTypes = {\n  value: PropTypes.string.isRequired,\n  onClickCallback: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nexport default Square;","import React from 'react';\nimport './Board.css';\nimport Square from './Square';\nimport PropTypes from 'prop-types';\n\nconst generateSquareComponents = (squares, onClickCallback) => {\n  const squaresTo2D = [].concat(...squares);\n  return squaresTo2D.map((square) => {\n    return (\n      <Square\n        value={square.value}\n        id={square.id}\n        onClickCallback={onClickCallback}\n        key={square.id}/>\n    );\n  });\n};\n\nconst Board = ({ squares, onClickCallback }) => {\n  const squareList = generateSquareComponents(squares, onClickCallback);\n\n  return (\n    <div className=\"grid\" role=\"button\">\n      {squareList}\n    </div>\n  );\n};\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        value: PropTypes.string.isRequired,\n      })\n    )\n  ),\n  onClickCallback: PropTypes.func.isRequired,\n};\n\nexport default Board;","import React, { useState } from 'react';\nimport './App.css';\n\nimport Board from './components/Board';\n\nconst PLAYER_1 = 'x';\nconst PLAYER_2 = 'o';\n\nconst generateSquares = () => {\n  const squares = [];\n  let row = 0;\n  let col = 0;\n  let currentId = 0;\n\n  while (row < 3) {\n    squares.push([]);\n    while (col < 3) {\n      squares[row].push({\n        id: currentId,\n        value: '',\n      });\n      col += 1;\n      currentId += 1;\n    }\n    row += 1;\n    col = 0;\n  }\n\n  return squares;\n};\n\nconst App = () => {\n  // This starts state off as a 2D array of JS objects with\n  // empty value and unique ids.\n\n  const [squares, setSquares] = useState(generateSquares());\n  const [currentPlayer, setSquareValue] = useState(PLAYER_1);\n  const [winner, setWinner] = useState(null);\n  const [count, setCount] = useState(1);\n\n  const updateSquares = (id) => {\n    if (winner !== null) {\n      return null;\n    }\n\n    const newSquares = [...squares];\n    let row = 0;\n    let col = 0;\n    let found = false;\n\n    while (row < 3 && found == false) {\n      while (col < 3 && found === false) {\n        let currentSquare = newSquares[row][col];\n        if (currentSquare.id === id) {\n          if (currentSquare.value !== '') {\n            return null;\n          }\n          setCount(count + 1);\n          currentSquare.value = currentPlayer;\n          found = true;\n\n          if (currentPlayer === PLAYER_1) {\n            setSquareValue(PLAYER_2);\n          } else {\n            setSquareValue(PLAYER_1);\n          }\n        }\n        col += 1;\n      }\n      row += 1;\n      col = 0;\n    }\n    setWinner(checkForWinner());\n    setSquares(newSquares);\n  };\n\n  const checkForWinner = () => {\n    // Check all the rows and columns for a winner\n    for (let i = 0; i < 3; i++) {\n      //// checks columns\n      if (\n        squares[0][i]['value'] == squares[1][i]['value'] &&\n        squares[1][i]['value'] == squares[2][i]['value'] &&\n        squares[0][i]['value'] != ''\n      ) {\n        return squares[0][i]['value'];\n      } else if (\n        //// checks rows\n        squares[i][0]['value'] == squares[i][1]['value'] &&\n        squares[i][0]['value'] == squares[i][2]['value'] &&\n        squares[i][0]['value'] != ''\n      ) {\n        return squares[i][0]['value'];\n      }\n    }\n    ////// checks diagonals\n    if (\n      squares[0][0]['value'] == squares[1][1]['value'] &&\n      squares[0][0]['value'] == squares[2][2]['value'] &&\n      squares[0][0]['value'] != ''\n    ) {\n      return squares[0][0]['value'];\n    }\n    if (\n      squares[0][2]['value'] == squares[1][1]['value'] &&\n      squares[0][2]['value'] == squares[2][0]['value'] &&\n      squares[0][2]['value'] != ''\n    ) {\n      return squares[0][2]['value'];\n    }\n    return null;\n  };\n\n  const resetGame = () => {\n    setSquares(generateSquares());\n    setSquareValue(PLAYER_1);\n    setCount(1);\n    setWinner(null);\n  };\n\n  const playerStatus = () => {\n    if (winner != null) {\n      return `Winner is ${winner}`;\n    } else if (winner == null && count == 9) {\n      return 'It is a Tie';\n    } else {\n      return `Current Player ${currentPlayer}`;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>React Tic Tac Toe</h1>\n        <h2>{playerStatus()}</h2>\n        <button onClick={resetGame}>Reset Game</button>\n      </header>\n      <main>\n        <Board squares={squares} onClickCallback={updateSquares} />\n      </main>\n    </div>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}